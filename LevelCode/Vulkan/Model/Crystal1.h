// "Crystal1.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Crystal1.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Crystal1_version_
const char Crystal1_version[4] = { '0','1','9','d' };
#define _Crystal1_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Crystal1_vertexcount_
const unsigned Crystal1_vertexcount = 96;
#define _Crystal1_vertexcount_
#endif
#ifndef _Crystal1_indexcount_
const unsigned Crystal1_indexcount = 132;
#define _Crystal1_indexcount_
#endif
#ifndef _Crystal1_materialcount_
const unsigned Crystal1_materialcount = 1; // can be used for batched draws
#define _Crystal1_materialcount_
#endif
#ifndef _Crystal1_meshcount_
const unsigned Crystal1_meshcount = 1;
#define _Crystal1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Crystal1_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Crystal1_vertices[96] =
{
	{	{ 0.116071f, 0.206853f, -0.127685f },	{ 0.196765f, 0.009244f, 0.000000f },	{ 0.481100f, 0.000000f, -0.876700f }	},
	{	{ 0.229016f, 0.255743f, -0.065708f },	{ 0.823949f, 0.987634f, 0.000000f },	{ 0.481100f, 0.000000f, -0.876700f }	},
	{	{ 0.229016f, -0.255743f, -0.065708f },	{ 0.176051f, 0.987634f, 0.000000f },	{ 0.481100f, 0.000000f, -0.876700f }	},
	{	{ 0.116071f, -0.206853f, -0.127685f },	{ 0.803235f, 0.009244f, 0.000000f },	{ 0.481100f, 0.000000f, -0.876700f }	},
	{	{ 0.116071f, -0.206853f, 0.127685f },	{ 0.803235f, 0.990756f, 0.000000f },	{ 0.000000f, -0.341600f, 0.939800f }	},
	{	{ -0.116071f, -0.206853f, 0.127685f },	{ 0.196765f, 0.990756f, 0.000000f },	{ 0.000000f, -0.341600f, 0.939800f }	},
	{	{ -0.109012f, -0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ 0.000000f, -0.341600f, 0.939800f }	},
	{	{ 0.109012f, -0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ 0.000000f, -0.341600f, 0.939800f }	},
	{	{ -0.116071f, -0.206853f, 0.127685f },	{ 0.196765f, 0.990756f, 0.000000f },	{ -0.338300f, -0.333700f, 0.879900f }	},
	{	{ -0.229016f, -0.255743f, 0.065708f },	{ 0.018714f, 0.802210f, 0.000000f },	{ -0.338300f, -0.333700f, 0.879900f }	},
	{	{ -0.109012f, -0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ -0.338300f, -0.333700f, 0.879900f }	},
	{	{ 0.116071f, -0.206853f, -0.127685f },	{ 0.803235f, 0.009244f, 0.000000f },	{ 0.338300f, -0.333700f, -0.879900f }	},
	{	{ 0.229016f, -0.255743f, -0.065708f },	{ 0.981286f, 0.197790f, 0.000000f },	{ 0.338300f, -0.333700f, -0.879900f }	},
	{	{ 0.109012f, -0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ 0.338300f, -0.333700f, -0.879900f }	},
	{	{ 0.116071f, 0.206853f, -0.127685f },	{ 0.196765f, 0.009244f, 0.000000f },	{ 0.000000f, 0.341600f, -0.939800f }	},
	{	{ -0.116071f, 0.206853f, -0.127685f },	{ 0.803235f, 0.009244f, 0.000000f },	{ 0.000000f, 0.341600f, -0.939800f }	},
	{	{ -0.109012f, 0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ 0.000000f, 0.341600f, -0.939800f }	},
	{	{ 0.109012f, 0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ 0.000000f, 0.341600f, -0.939800f }	},
	{	{ -0.116071f, 0.206853f, 0.127685f },	{ 0.803235f, 0.990756f, 0.000000f },	{ 0.000000f, 0.341600f, 0.939800f }	},
	{	{ 0.116071f, 0.206853f, 0.127685f },	{ 0.196765f, 0.990756f, 0.000000f },	{ 0.000000f, 0.341600f, 0.939800f }	},
	{	{ 0.109012f, 0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ 0.000000f, 0.341600f, 0.939800f }	},
	{	{ -0.109012f, 0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ 0.000000f, 0.341600f, 0.939800f }	},
	{	{ 0.116071f, 0.206853f, 0.127685f },	{ 0.196765f, 0.990756f, 0.000000f },	{ 0.338300f, 0.333700f, 0.879900f }	},
	{	{ 0.229016f, 0.255743f, 0.065708f },	{ 0.018714f, 0.802210f, 0.000000f },	{ 0.338300f, 0.333700f, 0.879900f }	},
	{	{ 0.109012f, 0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ 0.338300f, 0.333700f, 0.879900f }	},
	{	{ -0.116071f, 0.206853f, -0.127685f },	{ 0.803235f, 0.009244f, 0.000000f },	{ -0.338300f, 0.333700f, -0.879900f }	},
	{	{ -0.229016f, 0.255743f, -0.065708f },	{ 0.834085f, 0.018714f, 0.000000f },	{ -0.338300f, 0.333700f, -0.879900f }	},
	{	{ -0.109012f, 0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ -0.338300f, 0.333700f, -0.879900f }	},
	{	{ -0.116071f, 0.206853f, -0.127685f },	{ 0.823949f, 0.197394f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.116071f, 0.206853f, -0.127685f },	{ 0.823949f, 0.802606f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.116071f, -0.206853f, -0.127685f },	{ 0.176051f, 0.802606f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.116071f, -0.206853f, -0.127685f },	{ 0.176051f, 0.197394f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.116071f, 0.206853f, 0.127685f },	{ 0.823949f, 0.197394f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.116071f, 0.206853f, 0.127685f },	{ 0.823949f, 0.802606f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.116071f, -0.206853f, 0.127685f },	{ 0.176051f, 0.802606f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.116071f, -0.206853f, 0.127685f },	{ 0.176051f, 0.197394f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.109012f, 0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ -0.338300f, 0.333700f, 0.879900f }	},
	{	{ -0.229016f, 0.255743f, 0.065708f },	{ 0.981286f, 0.802210f, 0.000000f },	{ -0.338300f, 0.333700f, 0.879900f }	},
	{	{ -0.116071f, 0.206853f, 0.127685f },	{ 0.803235f, 0.990756f, 0.000000f },	{ -0.338300f, 0.333700f, 0.879900f }	},
	{	{ 0.109012f, 0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ 0.338300f, 0.333700f, -0.879900f }	},
	{	{ 0.229016f, 0.255743f, -0.065708f },	{ 0.018714f, 0.197790f, 0.000000f },	{ 0.338300f, 0.333700f, -0.879900f }	},
	{	{ 0.116071f, 0.206853f, -0.127685f },	{ 0.196765f, 0.009244f, 0.000000f },	{ 0.338300f, 0.333700f, -0.879900f }	},
	{	{ 0.109012f, -0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ 0.338300f, -0.333700f, 0.879900f }	},
	{	{ 0.229016f, -0.255743f, 0.065708f },	{ 0.981286f, 0.802210f, 0.000000f },	{ 0.338300f, -0.333700f, 0.879900f }	},
	{	{ 0.116071f, -0.206853f, 0.127685f },	{ 0.803235f, 0.990756f, 0.000000f },	{ 0.338300f, -0.333700f, 0.879900f }	},
	{	{ -0.116071f, 0.206853f, 0.127685f },	{ 0.803235f, 0.990756f, 0.000000f },	{ -0.481100f, 0.000000f, 0.876700f }	},
	{	{ -0.229016f, 0.255743f, 0.065708f },	{ 0.823949f, 0.987634f, 0.000000f },	{ -0.481100f, 0.000000f, 0.876700f }	},
	{	{ -0.229016f, -0.255743f, 0.065708f },	{ 0.176051f, 0.987634f, 0.000000f },	{ -0.481100f, 0.000000f, 0.876700f }	},
	{	{ -0.116071f, -0.206853f, 0.127685f },	{ 0.196765f, 0.990756f, 0.000000f },	{ -0.481100f, 0.000000f, 0.876700f }	},
	{	{ -0.116071f, -0.206853f, -0.127685f },	{ 0.196765f, 0.009244f, 0.000000f },	{ 0.000000f, -0.341600f, -0.939800f }	},
	{	{ 0.116071f, -0.206853f, -0.127685f },	{ 0.803235f, 0.009244f, 0.000000f },	{ 0.000000f, -0.341600f, -0.939800f }	},
	{	{ 0.109012f, -0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ 0.000000f, -0.341600f, -0.939800f }	},
	{	{ -0.109012f, -0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ 0.000000f, -0.341600f, -0.939800f }	},
	{	{ -0.109012f, -0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ -0.714200f, -0.700000f, 0.000000f }	},
	{	{ -0.109012f, -0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ -0.714200f, -0.700000f, 0.000000f }	},
	{	{ -0.229016f, -0.255743f, 0.065708f },	{ 0.018714f, 0.802210f, 0.000000f },	{ -0.714200f, -0.700000f, 0.000000f }	},
	{	{ -0.229016f, -0.255743f, -0.065708f },	{ 0.018714f, 0.197790f, 0.000000f },	{ -0.714200f, -0.700000f, 0.000000f }	},
	{	{ -0.229016f, 0.255743f, 0.065708f },	{ 0.985389f, 0.792079f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.229016f, 0.255743f, -0.065708f },	{ 0.823949f, 0.012366f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.229016f, -0.255743f, -0.065708f },	{ 0.014611f, 0.207921f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.229016f, -0.255743f, 0.065708f },	{ 0.014611f, 0.792079f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.229016f, 0.255743f, -0.065708f },	{ 0.985389f, 0.207921f, 0.000000f },	{ -0.714200f, 0.700000f, -0.000000f }	},
	{	{ -0.229016f, 0.255743f, 0.065708f },	{ 0.981286f, 0.802210f, 0.000000f },	{ -0.714200f, 0.700000f, -0.000000f }	},
	{	{ -0.109012f, 0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ -0.714200f, 0.700000f, -0.000000f }	},
	{	{ -0.109012f, 0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ -0.714200f, 0.700000f, -0.000000f }	},
	{	{ 0.229016f, 0.255743f, 0.065708f },	{ 0.823949f, 0.806684f, 0.000000f },	{ 0.481100f, 0.000000f, 0.876700f }	},
	{	{ 0.116071f, 0.206853f, 0.127685f },	{ 0.196765f, 0.990756f, 0.000000f },	{ 0.481100f, 0.000000f, 0.876700f }	},
	{	{ 0.116071f, -0.206853f, 0.127685f },	{ 0.803235f, 0.990756f, 0.000000f },	{ 0.481100f, 0.000000f, 0.876700f }	},
	{	{ 0.229016f, -0.255743f, 0.065708f },	{ 0.176051f, 0.806684f, 0.000000f },	{ 0.481100f, 0.000000f, 0.876700f }	},
	{	{ 0.229016f, -0.255743f, -0.065708f },	{ 0.981286f, 0.197790f, 0.000000f },	{ 0.714200f, -0.700000f, -0.000000f }	},
	{	{ 0.229016f, -0.255743f, 0.065708f },	{ 0.981286f, 0.802210f, 0.000000f },	{ 0.714200f, -0.700000f, -0.000000f }	},
	{	{ 0.109012f, -0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ 0.714200f, -0.700000f, -0.000000f }	},
	{	{ 0.109012f, -0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ 0.714200f, -0.700000f, -0.000000f }	},
	{	{ 0.229016f, 0.255743f, 0.065708f },	{ 0.018714f, 0.802210f, 0.000000f },	{ 0.714200f, 0.700000f, 0.000000f }	},
	{	{ 0.229016f, 0.255743f, -0.065708f },	{ 0.018714f, 0.197790f, 0.000000f },	{ 0.714200f, 0.700000f, 0.000000f }	},
	{	{ 0.109012f, 0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ 0.714200f, 0.700000f, 0.000000f }	},
	{	{ 0.109012f, 0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ 0.714200f, 0.700000f, 0.000000f }	},
	{	{ -0.109012f, -0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.109012f, -0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.109012f, -0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.109012f, -0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.229016f, 0.255743f, -0.065708f },	{ 0.014611f, 0.207921f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.229016f, 0.255743f, 0.065708f },	{ 0.014611f, 0.792079f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.229016f, -0.255743f, 0.065708f },	{ 0.985389f, 0.792079f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.229016f, -0.255743f, -0.065708f },	{ 0.985389f, 0.207921f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.109012f, -0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ -0.338300f, -0.333700f, -0.879900f }	},
	{	{ -0.229016f, -0.255743f, -0.065708f },	{ 0.018714f, 0.197790f, 0.000000f },	{ -0.338300f, -0.333700f, -0.879900f }	},
	{	{ -0.116071f, -0.206853f, -0.127685f },	{ 0.196765f, 0.009244f, 0.000000f },	{ -0.338300f, -0.333700f, -0.879900f }	},
	{	{ -0.229016f, 0.255743f, -0.065708f },	{ 0.834085f, 0.018714f, 0.000000f },	{ -0.481100f, 0.000000f, -0.876700f }	},
	{	{ -0.116071f, 0.206853f, -0.127685f },	{ 0.823949f, 0.176051f, 0.000000f },	{ -0.481100f, 0.000000f, -0.876700f }	},
	{	{ -0.116071f, -0.206853f, -0.127685f },	{ 0.196765f, 0.009244f, 0.000000f },	{ -0.481100f, 0.000000f, -0.876700f }	},
	{	{ -0.229016f, -0.255743f, -0.065708f },	{ 0.176051f, 0.012366f, 0.000000f },	{ -0.481100f, 0.000000f, -0.876700f }	},
	{	{ 0.109012f, 0.378179f, -0.065416f },	{ 0.197545f, 0.198677f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.109012f, 0.378179f, -0.065416f },	{ 0.802455f, 0.198677f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.109012f, 0.378179f, 0.065416f },	{ 0.802455f, 0.801323f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.109012f, 0.378179f, 0.065416f },	{ 0.197545f, 0.801323f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
};
#define _Crystal1_vertices_
#endif
#ifndef _Crystal1_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Crystal1_indices[132] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 12, 13,
	 14, 15, 16,
	 17, 14, 16,
	 18, 19, 20,
	 21, 18, 20,
	 22, 23, 24,
	 25, 26, 27,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 34,
	 35, 32, 34,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 45, 47,
	 49, 50, 51,
	 52, 49, 51,
	 53, 54, 55,
	 56, 53, 55,
	 57, 58, 59,
	 60, 57, 59,
	 61, 62, 63,
	 64, 61, 63,
	 65, 66, 67,
	 68, 65, 67,
	 69, 70, 71,
	 72, 69, 71,
	 73, 74, 75,
	 76, 73, 75,
	 77, 78, 79,
	 80, 77, 79,
	 81, 82, 83,
	 84, 81, 83,
	 85, 86, 87,
	 88, 89, 90,
	 91, 88, 90,
	 92, 93, 94,
	 95, 92, 94,
};
#define _Crystal1_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Crystal1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Crystal1_materials[1] =
{
	{
		{{ 0.108579f, 0.053576f, 0.389513f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Purple",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Crystal1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Crystal1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Crystal1_batches[1][2] =
{
	{ 132, 0 },
};
#define _Crystal1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Crystal1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Crystal1_meshes[1] =
{
	{
		"default",
		132,
		0,
		0,
	},
};
#define _Crystal1_meshes_
#endif
