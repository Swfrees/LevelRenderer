// "Crystal4.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Crystal4.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Crystal4_version_
const char Crystal4_version[4] = { '0','1','9','d' };
#define _Crystal4_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Crystal4_vertexcount_
const unsigned Crystal4_vertexcount = 90;
#define _Crystal4_vertexcount_
#endif
#ifndef _Crystal4_indexcount_
const unsigned Crystal4_indexcount = 90;
#define _Crystal4_indexcount_
#endif
#ifndef _Crystal4_materialcount_
const unsigned Crystal4_materialcount = 1; // can be used for batched draws
#define _Crystal4_materialcount_
#endif
#ifndef _Crystal4_meshcount_
const unsigned Crystal4_meshcount = 1;
#define _Crystal4_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Crystal4_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Crystal4_vertices[90] =
{
	{	{ 0.205141f, -0.169246f, -0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.275900f, -0.824800f, -0.493500f }	},
	{	{ -0.034786f, -0.251941f, -0.048427f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.275900f, -0.824800f, -0.493500f }	},
	{	{ 0.009029f, -0.121300f, -0.242257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.275900f, -0.824800f, -0.493500f }	},
	{	{ -0.034786f, -0.251941f, -0.048427f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.549500f, -0.630000f, -0.548800f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.549500f, -0.630000f, -0.548800f }	},
	{	{ 0.009029f, -0.121300f, -0.242257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.549500f, -0.630000f, -0.548800f }	},
	{	{ 0.220934f, -0.046312f, 0.126778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.735300f, 0.413100f, 0.537300f }	},
	{	{ 0.188246f, 0.181543f, -0.003699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.735300f, 0.413100f, 0.537300f }	},
	{	{ 0.108293f, 0.009683f, 0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.735300f, 0.413100f, 0.537300f }	},
	{	{ 0.225002f, 0.059823f, -0.113247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.422400f, 0.673500f, -0.606600f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.422400f, 0.673500f, -0.606600f }	},
	{	{ 0.188246f, 0.181543f, -0.003699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.422400f, 0.673500f, -0.606600f }	},
	{	{ -0.034786f, -0.251941f, -0.048427f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.638700f, -0.768800f, 0.031300f }	},
	{	{ -0.132790f, -0.162178f, 0.156440f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.638700f, -0.768800f, 0.031300f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.638700f, -0.768800f, 0.031300f }	},
	{	{ 0.023674f, -0.219233f, 0.135668f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.024300f, -0.400100f, 0.916200f }	},
	{	{ 0.108293f, 0.009683f, 0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.024300f, -0.400100f, 0.916200f }	},
	{	{ -0.132790f, -0.162178f, 0.156440f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.024300f, -0.400100f, 0.916200f }	},
	{	{ 0.063534f, 0.249102f, -0.030680f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.260100f, 0.878800f, 0.400100f }	},
	{	{ -0.070682f, 0.215653f, 0.130023f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.260100f, 0.878800f, 0.400100f }	},
	{	{ 0.057795f, 0.141775f, 0.208780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.260100f, 0.878800f, 0.400100f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.340400f, 0.913600f, -0.222400f }	},
	{	{ -0.205141f, 0.169246f, 0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.340400f, 0.913600f, -0.222400f }	},
	{	{ 0.063534f, 0.249102f, -0.030680f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.340400f, 0.913600f, -0.222400f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.837600f, 0.321600f, -0.441600f }	},
	{	{ -0.205141f, 0.169246f, 0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.837600f, 0.321600f, -0.441600f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.837600f, 0.321600f, -0.441600f }	},
	{	{ -0.139945f, -0.030692f, 0.215645f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.918800f, 0.022000f, 0.394100f }	},
	{	{ -0.205141f, 0.169246f, 0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.918800f, 0.022000f, 0.394100f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.918800f, 0.022000f, 0.394100f }	},
	{	{ 0.057795f, 0.141775f, 0.208780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.308800f, 0.388600f, 0.868200f }	},
	{	{ -0.070682f, 0.215653f, 0.130023f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.308800f, 0.388600f, 0.868200f }	},
	{	{ -0.139945f, -0.030692f, 0.215645f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.308800f, 0.388600f, 0.868200f }	},
	{	{ -0.070682f, 0.215653f, 0.130023f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.557600f, 0.408000f, 0.722900f }	},
	{	{ -0.205141f, 0.169246f, 0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.557600f, 0.408000f, 0.722900f }	},
	{	{ -0.139945f, -0.030692f, 0.215645f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.557600f, 0.408000f, 0.722900f }	},
	{	{ -0.205141f, 0.169246f, 0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.299200f, 0.952800f, -0.051500f }	},
	{	{ -0.070682f, 0.215653f, 0.130023f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.299200f, 0.952800f, -0.051500f }	},
	{	{ 0.063534f, 0.249102f, -0.030680f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.299200f, 0.952800f, -0.051500f }	},
	{	{ 0.108293f, 0.009683f, 0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.115500f, 0.171400f, 0.978400f }	},
	{	{ 0.057795f, 0.141775f, 0.208780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.115500f, 0.171400f, 0.978400f }	},
	{	{ -0.139945f, -0.030692f, 0.215645f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.115500f, 0.171400f, 0.978400f }	},
	{	{ 0.108293f, 0.009683f, 0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.014800f, -0.411200f, 0.911400f }	},
	{	{ -0.139945f, -0.030692f, 0.215645f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.014800f, -0.411200f, 0.911400f }	},
	{	{ -0.132790f, -0.162178f, 0.156440f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.014800f, -0.411200f, 0.911400f }	},
	{	{ -0.132790f, -0.162178f, 0.156440f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.876900f, -0.236200f, 0.418700f }	},
	{	{ -0.139945f, -0.030692f, 0.215645f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.876900f, -0.236200f, 0.418700f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.876900f, -0.236200f, 0.418700f }	},
	{	{ -0.108292f, -0.009683f, -0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.823500f, 0.263800f, -0.502300f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.823500f, 0.263800f, -0.502300f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.823500f, 0.263800f, -0.502300f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.465700f, 0.599900f, -0.650600f }	},
	{	{ 0.063534f, 0.249102f, -0.030680f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.465700f, 0.599900f, -0.650600f }	},
	{	{ 0.188246f, 0.181543f, -0.003699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.465700f, 0.599900f, -0.650600f }	},
	{	{ 0.188246f, 0.181543f, -0.003699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.373100f, 0.843300f, 0.386900f }	},
	{	{ 0.063534f, 0.249102f, -0.030680f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.373100f, 0.843300f, 0.386900f }	},
	{	{ 0.057795f, 0.141775f, 0.208780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.373100f, 0.843300f, 0.386900f }	},
	{	{ 0.188246f, 0.181543f, -0.003699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.744800f, 0.402100f, 0.532500f }	},
	{	{ 0.057795f, 0.141775f, 0.208780f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.744800f, 0.402100f, 0.532500f }	},
	{	{ 0.108293f, 0.009683f, 0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.744800f, 0.402100f, 0.532500f }	},
	{	{ 0.023674f, -0.219233f, 0.135668f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.300500f, -0.918100f, 0.258500f }	},
	{	{ -0.132790f, -0.162178f, 0.156440f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.300500f, -0.918100f, 0.258500f }	},
	{	{ -0.034786f, -0.251941f, -0.048427f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.300500f, -0.918100f, 0.258500f }	},
	{	{ -0.250021f, -0.072738f, -0.038619f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.569400f, -0.575500f, -0.587100f }	},
	{	{ -0.108292f, -0.009683f, -0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.569400f, -0.575500f, -0.587100f }	},
	{	{ 0.009029f, -0.121300f, -0.242257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.569400f, -0.575500f, -0.587100f }	},
	{	{ -0.108292f, -0.009683f, -0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.083300f, 0.126300f, -0.988500f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.083300f, 0.126300f, -0.988500f }	},
	{	{ 0.009029f, -0.121300f, -0.242257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.083300f, 0.126300f, -0.988500f }	},
	{	{ 0.009029f, -0.121300f, -0.242257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.372600f, 0.201100f, -0.906000f }	},
	{	{ -0.070418f, 0.154630f, -0.213690f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.372600f, 0.201100f, -0.906000f }	},
	{	{ 0.225002f, 0.059823f, -0.113247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.372600f, 0.201100f, -0.906000f }	},
	{	{ 0.225002f, 0.059823f, -0.113247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.974200f, 0.199800f, 0.104900f }	},
	{	{ 0.188246f, 0.181543f, -0.003699f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.974200f, 0.199800f, 0.104900f }	},
	{	{ 0.220934f, -0.046312f, 0.126778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.974200f, 0.199800f, 0.104900f }	},
	{	{ 0.220934f, -0.046312f, 0.126778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.470100f, -0.498900f, 0.728100f }	},
	{	{ 0.108293f, 0.009683f, 0.237881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.470100f, -0.498900f, 0.728100f }	},
	{	{ 0.023674f, -0.219233f, 0.135668f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.470100f, -0.498900f, 0.728100f }	},
	{	{ 0.205141f, -0.169246f, -0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.326200f, -0.943100f, 0.064000f }	},
	{	{ 0.023674f, -0.219233f, 0.135668f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.326200f, -0.943100f, 0.064000f }	},
	{	{ -0.034786f, -0.251941f, -0.048427f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.326200f, -0.943100f, 0.064000f }	},
	{	{ 0.205141f, -0.169246f, -0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.641600f, -0.248100f, -0.725800f }	},
	{	{ 0.009029f, -0.121300f, -0.242257f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.641600f, -0.248100f, -0.725800f }	},
	{	{ 0.225002f, 0.059823f, -0.113247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.641600f, -0.248100f, -0.725800f }	},
	{	{ 0.220934f, -0.046312f, 0.126778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.611600f, -0.676600f, 0.410100f }	},
	{	{ 0.023674f, -0.219233f, 0.135668f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.611600f, -0.676600f, 0.410100f }	},
	{	{ 0.205141f, -0.169246f, -0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.611600f, -0.676600f, 0.410100f }	},
	{	{ 0.205141f, -0.169246f, -0.052508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.995400f, -0.092700f, -0.024100f }	},
	{	{ 0.225002f, 0.059823f, -0.113247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.995400f, -0.092700f, -0.024100f }	},
	{	{ 0.220934f, -0.046312f, 0.126778f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.995400f, -0.092700f, -0.024100f }	},
};
#define _Crystal4_vertices_
#endif
#ifndef _Crystal4_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Crystal4_indices[90] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 18, 19, 20,
	 21, 22, 23,
	 24, 25, 26,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
	 54, 55, 56,
	 57, 58, 59,
	 60, 61, 62,
	 63, 64, 65,
	 66, 67, 68,
	 69, 70, 71,
	 72, 73, 74,
	 75, 76, 77,
	 78, 79, 80,
	 81, 82, 83,
	 84, 85, 86,
	 87, 88, 89,
};
#define _Crystal4_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Crystal4_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Crystal4_materials[1] =
{
	{
		{{ 0.640000f, 0.067170f, 0.044994f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Red",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Crystal4_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Crystal4_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Crystal4_batches[1][2] =
{
	{ 90, 0 },
};
#define _Crystal4_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Crystal4_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Crystal4_meshes[1] =
{
	{
		"default",
		90,
		0,
		0,
	},
};
#define _Crystal4_meshes_
#endif
